# -*- coding: utf-8 -*-
"""LVADSUSR126-Tushar-Lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1brItmobQyMq2-FeEPsElRSMnPz1iMcZY
"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
import pandas as pd
import numpy as np

import numpy as np
import pandas as pd
df=pd.read_csv('/content/expenses.csv')
df.head()

df.describe()

df.info()

df.isnull().sum()

duplicate_rows = df.duplicated()
print(df[duplicate_rows])

df.drop_duplicates()
df.duplicated()

sns.boxplot(df['charges'])

df.shape

from scipy.stats import zscore
z_scores = zscore(df)
print(z_scores)

#2
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
df['sex']=le.fit_transform(df['sex'])
df['smoker']=le.fit_transform(df['smoker'])
df['region']=le.fit_transform(df['region'])
df.head()

from scipy.stats import zscore
z_scores = zscore(df)
abs_z_scores = np.abs(z_scores)
filtered_entries = (abs_z_scores < 3).all(axis=1)
df_cleaned = df[filtered_entries]
print("Original DataFrame:")
print(df.shape)
print("\nDataFrame after removing outliers:")
print(df_cleaned.shape)

df.corr()

import seaborn as sns
sns.heatmap(df.corr(),annot=True)

df=df.drop('children',axis='columns')
df=df.drop('region',axis='columns')
df=df.drop('bmi',axis='columns')
df.head()

#4
y=df.iloc[:,0]
x=df.iloc[:,1:]
from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
x=sc.fit_transform(x)
from sklearn.model_selection import train_test_split
train_x,test_x,train_y,test_y=train_test_split(x,y,test_size=0.3,random_state=555)

from sklearn.linear_model import LinearRegression
lr=LinearRegression()
lr.fit(train_x,train_y)
p=lr.predict(test_x)
print(lr.predict([[19,0,1,16884.92400]]))

from sklearn.metrics import mean_squared_error, r2_score
mse = mean_squared_error(test_y, p)
print(mse)
#srt=np.sqrt(mse)
#print(srt)

r2 = r2_score(test_y,p)
print(r2)

srt=np.sqrt(mse)
print(srt)